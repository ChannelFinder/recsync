# .github/workflows/ci-scripts-build.yml for use with EPICS Base ci-scripts
# (see: https://github.com/epics-base/ci-scripts)

# This is YAML - indentation levels are crucial

# Set the 'name:' properties to values that work for you (pvxs)

name: recsync

# Trigger on pushes and PRs to any branch
on:
  push:
    paths:
      - client/**
      - .github/workflows/ci-scripts-build.yml
  pull_request:
    paths:
      - client/**
      - .github/workflows/ci-scripts-build.yml

env:
    SETUP_PATH: .ci-local:.ci
    EPICS_TEST_IMPRECISE_TIMING: YES

jobs:
  prepare_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}
    steps:
      - name: Checkout runner-images repository
        uses: actions/checkout@v4
        with:
          repository: 'actions/runner-images'
          path: 'runner-images'

      - name: Generate matrix of supported images
        id: set_matrix
        run: |
          # This script will find all the JSON files for Linux, Windows, and macOS images,
          # extract the 'imageName' field, and create a JSON array.
          # We are targeting the image definitions that contain version numbers, and creating
          # separate lists for each OS.
          images=$(find runner-images/images -name "*.json" -type f -exec grep -l '"imageName":' {} + | xargs -I {} grep -o '"imageName": "[^"]*' {} | sed 's/"imageName": "//' | grep -E 'ubuntu-2[2-9]\.04|windows-202[2-9]|macos-1[3-9]')
          linux_images=$(echo "$images" | grep "ubuntu" | jq -R . | jq -s .)
          macos_images=$(echo "$images" | grep "macos" | jq -R . | jq -s .)
          windows_images=$(echo "$images" | grep "windows" | jq -R . | jq -s .)
          echo "matrix={\"linux\":${linux_images}, \"macos\":${macos_images}, \"windows\":${windows_images}}" >> $GITHUB_OUTPUT

  build-linux:
    needs: prepare_matrix
    defaults:
      run:
        working-directory: client
    name: ${{ matrix.cmp }} / ${{ matrix.configuration }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      CMP: ${{ matrix.cmp }}
      BCFG: ${{ matrix.configuration }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJSON(needs.prepare_matrix.outputs.matrix).linux }}
        cmp: [gcc, clang]
        configuration: [default, static, debug, static-debug]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Prepare and compile dependencies
      run: python .ci/cue.py prepare
    - name: Build main module (example app)
      run: python .ci/cue.py build
    - name: Run main module tests
      run: python .ci/cue.py -T 15M test
    - name: Collect and show test results
      run: python .ci/cue.py test-results

  build-macos:
    needs: prepare_matrix
    defaults:
      run:
        working-directory: client
    name: ${{ matrix.cmp }} / ${{ matrix.configuration }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      CMP: ${{ matrix.cmp }}
      BCFG: ${{ matrix.configuration }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJSON(needs.prepare_matrix.outputs.matrix).macos }}
        cmp: [clang]
        configuration: [default, debug]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Prepare and compile dependencies
      run: python .ci/cue.py prepare
    - name: Build main module (example app)
      run: python .ci/cue.py build
    - name: Run main module tests
      run: python .ci/cue.py -T 15M test
    - name: Collect and show test results
      run: python .ci/cue.py test-results

  build-windows:
    defaults:
      run:
        working-directory: client
    name: ${{ matrix.cmp }} / ${{ matrix.configuration }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      CMP: ${{ matrix.cmp }}
      BCFG: ${{ matrix.configuration }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJSON(needs.prepare_matrix.outputs.matrix).windows }}
        cmp: [gcc, vs2022, vs2019]
        configuration: [default, static, debug, static-debug]
        exclude:
          - os: windows-2022
            cmp: vs2019

          - os: windows-2019
            cmp: vs2022

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Prepare and compile dependencies
      run: python .ci/cue.py prepare
    - name: Build main module (example app)
      run: python .ci/cue.py build
    - name: Run main module tests
      run: python .ci/cue.py -T 15M test
    - name: Collect and show test results
      run: python .ci/cue.py test-results

  build-cross:
    defaults:
      run:
        working-directory: client
    name: cross ${{ matrix.cross }} / ${{ matrix.cmp }} / ${{ matrix.configuration }}
    runs-on: ubuntu-latest
    env:
      CMP: gcc
      BCFG: default
      CI_CROSS_TARGETS: ${{ matrix.cross }}
      TEST: ${{ matrix.test }}
      APT: re2c
    strategy:
      fail-fast: false
      matrix:
        # configuration: [default, static, debug, static-debug]
        configuration: [default]
        cross:
        - linux-aarch64
        - linux-arm@arm-linux-gnueabi
        - linux-arm@arm-linux-gnueabihf
        - linux-ppc
        - linux-ppc64
        - win32-x86-mingw
        - windows-x64-mingw
        - RTEMS-pc386-qemu@4.9
        - RTEMS-pc386-qemu@4.10
        - RTEMS-pc686-qemu@5
        include:
        - cross: RTEMS-pc386-qemu@4.10
          test: NO
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Prepare and compile dependencies
      run: python .ci/cue.py prepare
    - name: Build main module (example app)
      run: python .ci/cue.py build
    - name: Run main module tests
      run: python .ci/cue.py -T 15M test
    - name: Collect and show test results
      run: python .ci/cue.py test-results
